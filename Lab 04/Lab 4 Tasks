; two types of loop 
;1. implicit
;2. explicit  



; example of implicit loop 
;assemnler auto updates the iteration

mov ah, 02h
mov cx,5
mov dl,30h
print:
    int 21h
    inc dl
    loop print  ; loop compare cx value, every time the loop execute cx dec by 1
    







                             
; example of explicit loop  
;need to manually update 
;use for infinite loop

mov dl, 30h     ; step 1 = initialization 

print:
    cmp dl, 35h  ; comparison
    jge exit      ;will exit if greater or equal 
    
    mov ah, 02h
    int 21h     ; printing the current state  (output:01234)
    
    inc dl       ;increment for the next value
    
    jmp print   ; back to print:


exit:










;    while True:
;        x= input()
;        if x==0:
;            break
;        print (x)

; we will do this with explicit loop because of infinite loop 
start:
    mov ah, 1h
    int 21h
    
    mov bl, al
    
    cmp bl, 30h
    je exit
    ;mov dl, bl
    ;mov ah, 2
    ;int 21h
    jmp start


exit:


##########################################################################################
;1


mov ah, 02h
mov cx,80
mov dl,2ah
print:
    int 21h
    loop print



##########################################################################################
;2
;A

.MODEL SMALL
 
.STACK 100H

.DATA 

sum dw 1
rem dw 0 
ten db 10

.CODE
MAIN PROC

;iniitialize DS

MOV AX,@DATA
MOV DS,AX
 
; enter your code here 

mov ax,1
block_one:
add ax,3 
add sum,ax 

cmp ax,148
jle block_one
 

    
mov ax,1 
mov cx,1000 
mov ax, sum 


print_sum:
mov dx,0 
div cx 
mov rem, dx 
mov dl,al
mov ah,2 
add dl,30h
int 21h 

mov ax,cx
div ten
mov cl,al
mov ch,0   
mov ax,rem 

cmp cx,1
jge print_sum 


;exit to DOS
               


MAIN ENDP
    END MAIN






##########################################################################################
;3
mov cx, 10

start: 
    mov ah,1
    int 21h    
    mov ah, 2h
    mov dl, 08h
    int 21h
    
    mov dl, 2ah
    
    int 21h

loop start


##########################################################################################
6
.MODEL SMALL
 
.STACK 100H

.DATA
a db 'Enter a hex digit: $'
b db 'In decimal it is: $'
c db 'Do you want to do it again? (y/n) $'
d db 'ILLEGAL CHARACTER - ENTER 0 .. 9 OR A .. F$'
result db ?



.CODE  
MAIN PROC

    ;iniitialize DS
    
    MOV AX,@DATA
    MOV DS,AX
     
    ; enter your code here 
    
start:
    
    mov ah,9
    lea dx, a
    int 21h
    

    mov ah,1
    int 21h

    mov result, al

    cmp result, '9'
    jg high
    jle low
    
    high:

       cmp result, 'F'
       jg exit         
       sub al, 'A'
       add al, 10
       mov ah, 0
       mov cl, 10
       div cl
       add al, '0'
       mov result, al
       mov cl, ah

       mov dx, 0ah
       mov ah,2
       int 21h
       mov dx, 0dh
       mov ah,2
       int 21h

    
       mov ah,9
       lea dx, b
       int 21h



       
       mov dl, result
       mov ah,2 
       int 21h  
       
       mov al, cl
       add al, '0'
       mov result, al
       

       mov dl, result
       mov ah,2 
       int 21h       
       jmp again

    
    
    
    low:
    mov dx, 0ah
    mov ah,2
    int 21h
    mov dx, 0dh
    mov ah,2
    int 21h

    
    mov ah,9
    lea dx, b
    int 21h
    
    mov dl, result
    mov ah,2 
    int 21h

    again: 
    mov dx, 0ah
    mov ah,2
    int 21h
    mov dx, 0dh
    mov ah,2
    int 21h

    


    mov ah,9
    lea dx, c
    int 21h
    mov ah,1
    int 21h
    cmp al, 'y'


    mov dx, 0ah
    mov ah,2
    int 21h
    mov dx, 0dh
    mov ah,2
    int 21h    
    
    
    je start
    
    jmp exit2 


exit:

       mov dx, 0ah
       mov ah,2
       int 21h
       mov dx, 0dh
       mov ah,2
       int 21h

    
       mov ah,9
       lea dx, d
       int 21h

       
exit2:
 

MAIN ENDP
    END MAIN





##########################################################################################
