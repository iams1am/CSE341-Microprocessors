; index arr[0] acts as offset


; =======================================================================
; using pointer

;.data
;a dw 1, 2, 3, 4, 5
;
;.code
;mov cx, 5
;mov ah, 2
;lea si, a ; si is a register, which points at the value 1 of the array a
;
;start:
;    mov dl ,a[si]
;    int 21h
;    add si, 1   ; now, si is pointing at he value 2 of the array a
;    
;    loop start
; =======================================================================





; =======================================================================
; using index

;.data
;a dw 1, 2, 3, 4, 5
;
;.code
;mov cx, 5
;mov ah, 2
;mov si, 0
;
;start:
;    mov dl, a[si]
;    int 21h
;    add si, 1
;    loop start
; =======================================================================





; =======================================================================
; dup(?) --> codeword for duplication

;.data
;a db 5 dup(?)  ; a = [0, 0, 0, 0, 0]   ;  ? means unknown
;
;a db 5 dup(10)  ; a = [10, 10, 10, 10, 10]
; ======================================================================= 





; =======================================================================
;.data
;a db "hello"
;
;.code
;mov cx, 5
;mov ah, 2
;mov si, 0
;
;start:
;mov dl, a[si]
;int 21h
;add si, 1
;loop start
; =======================================================================


;################################################################################################

;1

.MODEL SMALL
.STACK 100H
.DATA
a db "Please enter the length of your name: $"
b db "Please enter your name: $"
d db "your name is: $"
c db ?


.CODE
MAIN PROC
  ;iniitialize DS
  MOV AX,@DATA
  MOV DS,AX
  ; enter your code here
    
    mov ah,9
    lea dx, a
    int 21h
    
    mov ah,1
    int 21h
    sub al, 30h
    mov cx, 0
    mov cl, al
    mov bl, cl
    
    mov ah,2
    mov dl, 0ah
    int 21h
    mov dl, 0dh
    int 21h
    
    
    mov ah,9
    lea dx,b
    int 21h
    
    mov si,0
    
    store_name:
        mov ah,1
        int 21h
        mov c[si],al
        add si, 1
        loop store_name
     
    
    
    mov ah, 2
    mov dl, 0ah
    int 21h
    mov dl, 0dh
    int 21h
    
    mov ah,9
    lea dx,d
    int 21h
    
    mov cl, bl
    mov si,0
    mov ah,2

    print:
        mov dl, c[si]
        int 21h
        add si,1
        loop print    
    

  ;exit to DOS
  MOV AX,4C00H
  INT 21H
MAIN ENDP
END MAIN




################################################################################################
;2

.MODEL SMALL
.STACK 100H
.DATA
a db 'Please enter 5 digits: $' ; Prompt message
c db 'Here is your sorted array: $'  ; Prompt message
b db 5 dup(?)                        ; Array to store digits
newline db 0Dh,0Ah, '$'              ; Newline for output


.CODE
MAIN PROC
    ; Initialize DS
    MOV AX, @DATA
    MOV DS, AX

    ; Display prompt
    mov ah, 9
    lea dx, a
    int 21h

    ; Input 5 digits
    mov cx, 5        ; Loop counter for 5 digits
    mov si, 0        ; Array index

store_input:
    mov ah, 1        ; Function 1: Read a character
    int 21h
    sub al, '0'      ; Convert ASCII to numeric (e.g., '5' -> 5)
    mov b[si], al    ; Store numeric value in the array
    inc si           ; Move to the next array index
    loop store_input ; Repeat 5 times

    ; Bubble Sort
    mov cx, 4        ; Outer loop (number of passes = n-1)
outer_loop:
    mov si, 0        ; Reset index for each pass
    mov dx, cx       ; Inner loop counter (dynamic)

inner_loop:
    mov al, b[si]    ; Load current element into AL
    mov ah, b[si+1]  ; Load next element into AH
    cmp al, ah       ; Compare the two elements
    jle no_swap      ; If AL <= AH, no swap needed

    ; Swap the elements
    mov b[si], ah    ; Store AH in current position
    mov b[si+1], al  ; Store AL in the next position

no_swap:
    inc si           ; Move to the next pair
    dec dx           ; Decrease inner loop counter
    jnz inner_loop   ; Repeat inner loop until dx = 0

    loop outer_loop  ; Repeat outer loop (cx times)

    ; Print sorted array
    lea dx, newline  ; Print newline
    mov ah, 9
    int 21h
    mov ah, 9
    lea dx,c
    int 21h

    mov cx, 5        ; Loop counter for 5 elements
    mov si, 0        ; Reset index

print_array:
    mov dl, b[si]    ; Load the sorted value
    add dl, '0'      ; Convert numeric value back to ASCII
    mov ah, 2        ; Function 2: Print character
    int 21h
    inc si           ; Move to the next element
    loop print_array ; Repeat 5 times

    ; Exit to DOS
    mov ah, 4Ch
    int 21h
MAIN ENDP
END MAIN






################################################################################################
;3

.MODEL SMALL
.STACK 100H
.DATA
a db 'Please give me a number: $' ; Prompt message
c db 'Maximum number is: $'  ; Prompt message
b db 3 dup(?)                        ; Array to store digits
newline db 0Dh,0Ah, '$'              ; Newline for output


.CODE
MAIN PROC
    ; Initialize DS
    MOV AX, @DATA
    MOV DS, AX
    
    mov ah,9
    lea dx, a
    int 21h
    
    mov cx, 3
    mov si,0
    input:
        mov ah,1
        int 21h
        mov b[si], al
        add si, 1
        loop input
        
    
    mov ah, 9
    lea dx, newline
    int 21h
    
    mov ah,9
    lea dx, c
    int 21h
    
    mov si, 0
    compare:
        mov bh, b[si]
        mov bl, b[si+1]
        cmp bh,bl
        jge next
        mov bh, bl
        jmp next
        
        next:
            inc si
            mov bl, b[si+1]
            cmp bh, bl
            jge print
            mov bh, bl
            jmp print
            
    print:
        mov dl, bh
        mov ah,2
        int 21h    

    ; Exit to DOS
    mov ah, 4Ch
    int 21h
MAIN ENDP
END MAIN







################################################################################################

